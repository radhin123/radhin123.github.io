{"version":3,"sources":["webpack:///./src/components/forecast/forecast.module.scss","webpack:///./src/components/forecast/forecastTable.module.scss","webpack:///./src/components/forecast/forecastTable.js","webpack:///./src/components/forecast/forecast.js","webpack:///./src/pages/forecast.js"],"names":["module","exports","ForecastTableObj","tableColList","data","showColListRef","useRef","Object","keys","reduce","accumulator","currentValue","show","getTableCol","showColList","current","map","key","SymbolNameField","text","PureFieldWithValueCheck","indexOf","w","colorPosGreenNegRedPercentField","PercentField","KMBTField","colShow","push","useState","tableCol","setTableCol","className","forecastTableStyle","container","showColumn","FormControlLabel","control","Checkbox","onChange","name","color","checked","label","renderCheckbox","table","rows","columns","scrollbarSize","pageSize","components","noRowsOverlay","DefaultDataGridTable","disableSelectionOnClick","ForecastTable","src","value","index","id","forEach","convert2KMBTFloat","tryConvertFloat","Forecast","fetchStockData","useFetch","cachePolicy","fetchForecastData","getData","url","fetchObj","a","get","resp_data","response","ok","refreshForecastData","forecast_name","Promise","all","then","allResponses","console","log","length","update_time","forecast_data","output","symbol","forecastInfo","stockInfo","o","Symbol","Close","Number","MAX_VALUE","FCST","undefined","FCST_Upper30","FCST_Lower30","PE","PB","Dividend","High52","Low52","PerfWeek","PerfMonth","PerfQuarter","PerfHalfY","PerfYear","PerfYTD","setLastUpdateTime","Date","toLocaleString","setForecastTable","alert","error","catch","forecastTable","lastUpdateTime","arg","setArg","useEffect","DAF_Def","commonStyle","defaultFont","forecastStyle","shortid","generate","Grid","spacing","item","xs","FormControl","size","variant","argNodesSelect","InputLabel","htmlFor","Select","native","displayEmpty","event","target","display_name","justify","Typography","forecastTableLastUpdateTime","ForecastPage","StylesProvider","injectFirst"],"mappings":"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","file":"component---src-pages-forecast-js-fbe1d5f775573f09c18f.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"forecast-module--container--3rNM_\",\"controlPannel\":\"forecast-module--controlPannel--2TvxK\",\"valueText\":\"forecast-module--valueText--q3Jin\",\"controlToggleContainer\":\"forecast-module--controlToggleContainer--1cQF4\",\"forecastBtn\":\"forecast-module--forecastBtn--3L43m\",\"forecastTable\":\"forecast-module--forecastTable--3jONX\",\"forecastTableSelect\":\"forecast-module--forecastTableSelect--tEiVD\",\"forecastTableLastUpdateTime\":\"forecast-module--forecastTableLastUpdateTime--3VDUN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"forecastTable-module--container--3AdpP\",\"showColumn\":\"forecastTable-module--showColumn--1wAXt\",\"table\":\"forecastTable-module--table--3ELuJ\"};","import React, { useState, useRef } from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\n\r\nimport { tryConvertFloat, convert2KMBTFloat } from '../../common/utils'\r\nimport { colorPosGreenNegRedPercentField, PercentField, KMBTField, SymbolNameField, PureFieldWithValueCheck } from '../../common/reactUtils'\r\nimport DefaultDataGridTable from '../defaultDataGridTable'\r\n\r\nimport forecastTableStyle from './forecastTable.module.scss'\r\nimport '../muiTablePagination.css'\r\n\r\n\r\nconst ForecastTableObj = ({ tableColList, data }) => {\r\n\r\n  const showColListRef = useRef(Object.keys(tableColList).reduce((accumulator, currentValue) => {\r\n    accumulator[currentValue] = tableColList[currentValue].show\r\n    return accumulator\r\n  }, {}))\r\n\r\n  const getTableColTemplate = (showColList) => {\r\n    return Object.keys(showColList).map((key) => {\r\n      if (key === 'Symbol') {\r\n        return SymbolNameField(key, tableColList[key].text, 110, showColList[key])\r\n      } else if (key === 'Close' || key === 'PE' || key === 'PB') {\r\n        return PureFieldWithValueCheck(key, tableColList[key].text, 110, 2, showColList[key])\r\n      } else if (key.indexOf('Perf') != -1 || key.indexOf('FCST') != -1) {\r\n        let w = 120\r\n        if (key.indexOf('FCST_') != -1) {\r\n          w = 140\r\n        }\r\n        return colorPosGreenNegRedPercentField(key, tableColList[key].text, w, showColList[key])\r\n      } else if (key === 'Dividend' || key === 'High52' || key === 'Low52') {\r\n        return PercentField(key, tableColList[key].text, 110, showColList[key])\r\n      } else {\r\n        return KMBTField(key, tableColList[key].text, 130, 2, showColList[key])\r\n      }\r\n    })\r\n  }\r\n\r\n  const getTableCol = ()=>{\r\n    return getTableColTemplate(showColListRef.current).reduce((accumulator, currentValue) => {\r\n      if (currentValue.colShow) {\r\n        accumulator.push(currentValue)\r\n      }\r\n      return accumulator\r\n    }, [])\r\n  }\r\n  const [tableCol, setTableCol] = useState(getTableCol())\r\n\r\n  const renderCheckbox = (key) => {\r\n    return <FormControlLabel\r\n      key={key}\r\n      control={\r\n        <Checkbox\r\n          onChange={() => {\r\n            showColListRef.current[key] = !showColListRef.current[key]\r\n            setTableCol(getTableCol())\r\n          }}\r\n          name={tableColList[key].text}\r\n          color=\"primary\"\r\n          checked={showColListRef.current[key]}\r\n        />\r\n      }\r\n      label={\r\n        <div>{tableColList[key].text}</div>\r\n      }\r\n    />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={forecastTableStyle.container}>\r\n        <div className={forecastTableStyle.showColumn}>\r\n          {Object.keys(showColListRef.current).map((key) => {\r\n            return renderCheckbox(key)\r\n          })}\r\n        </div>\r\n        <div className={forecastTableStyle.table}>\r\n          <DataGrid rows={data} columns={tableCol} scrollbarSize={17} pageSize={50} components={{ noRowsOverlay: DefaultDataGridTable, }} disableSelectionOnClick />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst ForecastTable = ({ tableColList, data }) => {\r\n  const appendIdAndTryConvertFloat = (src) => {\r\n    // console.log(src)\r\n    return src.map((value, index) => {\r\n      value.id = index\r\n      //tryConvertFloat\r\n      Object.keys(value).forEach((key) => {\r\n        if (key === 'Market Cap' || key === 'Avg Volume') {\r\n          value[key] = convert2KMBTFloat(value[key])\r\n        } else {\r\n          value[key] = tryConvertFloat(value[key])\r\n        }\r\n      })\r\n      return value\r\n    })\r\n  }\r\n  return (\r\n    <ForecastTableObj tableColList={tableColList} data={appendIdAndTryConvertFloat(data)} />\r\n  )\r\n}\r\n\r\nexport default ForecastTable\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport shortid from 'shortid'\r\nimport useFetch from 'use-http'\r\n\r\nimport ForecastTable from './forecastTable'\r\nimport { DAF_Def } from '../../common/def'\r\n\r\nimport commonStyle from '../common.module.scss'\r\nimport forecastStyle from './forecast.module.scss'\r\n\r\nconst Forecast = () => {\r\n  const fetchStockData = useFetch({ cachePolicy: 'no-cache' })\r\n  const fetchForecastData = useFetch({ cachePolicy: 'no-cache' })\r\n\r\n  const getData = async (url, fetchObj) => {\r\n    const resp_data = await fetchObj.get(url)\r\n    if (fetchObj.response.ok && resp_data) {\r\n      return resp_data\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n  }\r\n  const refreshForecastData = (forecast_name) => {\r\n    Promise.all([\r\n      getData(\"/plugin-react/stock-data/stat.json\", fetchStockData),\r\n      getData('/plugin-react/forecast-data/' + forecast_name + '.json', fetchForecastData),\r\n    ]).then((allResponses) => {\r\n      console.log(allResponses)\r\n      if (allResponses.length == 2 && allResponses[0] !== null && allResponses[1] !== null) {\r\n        let update_time = allResponses[1][\"update_time\"]\r\n        let forecast_data = allResponses[1][\"data\"]\r\n        let output = Object.keys(forecast_data).map((symbol, index) => {\r\n          let forecastInfo = forecast_data[symbol]\r\n          let stockInfo = allResponses[0][symbol]\r\n          let o = {\r\n            id: index,\r\n            Symbol: symbol,\r\n            Close: stockInfo !== undefined && stockInfo !== null && stockInfo['Close'] !== '-' ? stockInfo['Close'] : -Number.MAX_VALUE,\r\n            FCST: forecastInfo['FCST'] !== undefined && forecastInfo !== null && forecastInfo['FCST'] !== '-' ? forecastInfo['FCST'] : -Number.MAX_VALUE,\r\n            FCST_Upper30: forecastInfo['FCST_Upper30'] !== undefined && forecastInfo !== null && forecastInfo['FCST_Upper30'] !== '-' ? forecastInfo['FCST_Upper30'] : -Number.MAX_VALUE,\r\n            FCST_Lower30: forecastInfo['FCST_Lower30'] !== undefined && forecastInfo !== null && forecastInfo['FCST_Lower30'] !== '-' ? forecastInfo['FCST_Lower30'] : -Number.MAX_VALUE,\r\n            PE: stockInfo !== undefined && stockInfo !== null && stockInfo['P/E'] !== '-' ? stockInfo['P/E'] : Number.MAX_VALUE,\r\n            PB: stockInfo !== undefined && stockInfo !== null && stockInfo['P/B'] !== '-' ? stockInfo['P/B'] : Number.MAX_VALUE,\r\n            Dividend: stockInfo !== undefined && stockInfo !== null && stockInfo['Dividend %'] !== '-' ? stockInfo['Dividend %'] : -Number.MAX_VALUE,\r\n            High52: stockInfo !== undefined && stockInfo !== null && stockInfo['52W High'] !== '-' ? stockInfo['52W High'] : -Number.MAX_VALUE,\r\n            Low52: stockInfo !== undefined && stockInfo !== null && stockInfo['52W Low'] !== '-' ? stockInfo['52W Low'] : -Number.MAX_VALUE,\r\n            PerfWeek: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Week'] !== '-' ? stockInfo['Perf Week'] : -Number.MAX_VALUE,\r\n            PerfMonth: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Month'] !== '-' ? stockInfo['Perf Month'] : -Number.MAX_VALUE,\r\n            PerfQuarter: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Quarter'] !== '-' ? stockInfo['Perf Quarter'] : -Number.MAX_VALUE,\r\n            PerfHalfY: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Half Y'] !== '-' ? stockInfo['Perf Half Y'] : -Number.MAX_VALUE,\r\n            PerfYear: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Year'] !== '-' ? stockInfo['Perf Year'] : -Number.MAX_VALUE,\r\n            PerfYTD: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf YTD'] !== '-' ? stockInfo['Perf YTD'] : -Number.MAX_VALUE,\r\n          }\r\n\r\n          if (o.Close == -Number.MAX_VALUE) {\r\n            o.FCST = -Number.MAX_VALUE\r\n            o.FCST_Upper30 = -Number.MAX_VALUE\r\n            o.FCST_Lower30 = -Number.MAX_VALUE\r\n          } else {\r\n            if (o.FCST == -Number.MAX_VALUE) {\r\n              o.FCST = -Number.MAX_VALUE\r\n            } else {\r\n              o.FCST = (o.FCST - o.Close) / o.Close\r\n            }\r\n            if (o.FCST_Upper30 == -Number.MAX_VALUE) {\r\n              o.FCST_Upper30 = -Number.MAX_VALUE\r\n            } else {\r\n              o.FCST_Upper30 = (o.FCST_Upper30 - o.Close) / o.Close\r\n            }\r\n            if (o.FCST_Lower30 == -Number.MAX_VALUE) {\r\n              o.FCST_Lower30 = -Number.MAX_VALUE\r\n            } else {\r\n              o.FCST_Lower30 = (o.FCST_Lower30 - o.Close) / o.Close\r\n            }\r\n          }\r\n\r\n          return o\r\n        })\r\n\r\n        const tableColList = {\r\n          Symbol: { show: true, text: 'Symbol' },\r\n          Close: { show: true, text: 'Price' },\r\n          FCST: { show: true, text: 'FCST' },\r\n          FCST_Upper30: { show: true, text: 'FCST_Upper30' },\r\n          FCST_Lower30: { show: true, text: 'FCST_Lower30' },\r\n          PE: { show: true, text: 'P/E' },\r\n          PB: { show: true, text: 'P/B' },\r\n          Dividend: { show: true, text: 'Dividend %' },\r\n          High52: { show: true, text: '52W High' },\r\n          Low52: { show: true, text: '52W Low' },\r\n          PerfWeek: { show: true, text: 'Perf Week' },\r\n          PerfMonth: { show: true, text: 'Perf Month' },\r\n          PerfQuarter: { show: true, text: 'Perf Quarter' },\r\n          PerfHalfY: { show: true, text: 'Perf Half Y' },\r\n          PerfYear: { show: true, text: 'Perf Year' },\r\n          PerfYTD: { show: true, text: 'Perf YTD' },\r\n        }\r\n\r\n        setLastUpdateTime('Last Update Time: ' + new Date(update_time).toLocaleString('en-US'))\r\n        setForecastTable(<ForecastTable tableColList={tableColList} data={output} />)\r\n      } else {\r\n        alert(\"Get some data failed...\")\r\n        console.error(\"refreshForecastData some data failed\")\r\n      }\r\n    }).catch(() => {\r\n      alert(\"Get data failed...\")\r\n      console.error(\"refreshForecastData failed\")\r\n    })\r\n  }\r\n\r\n  const [forecastTable, setForecastTable] = useState()\r\n\r\n  const [lastUpdateTime, setLastUpdateTime] = useState('Last Update Time: None')\r\n  const [arg, setArg] = useState(0)\r\n\r\n  useEffect(() => {\r\n    // componentDidMount is here!\r\n    // componentDidUpdate is here!\r\n    refreshForecastData(DAF_Def[0].name)\r\n\r\n    return () => {\r\n      // componentWillUnmount is here!\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className={commonStyle.defaultFont + ' ' + forecastStyle.container}>\r\n      <div key={shortid.generate()} className={forecastStyle.forecastTable} >\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={6}>\r\n            <FormControl size=\"small\" variant=\"outlined\" className={forecastStyle.argNodesSelect}>\r\n              <InputLabel htmlFor=\"arg-select\">{'Data-Algorithm-Features'}</InputLabel>\r\n              <Select\r\n                native\r\n                value={arg}\r\n                displayEmpty\r\n                onChange={(event) => {\r\n                  setArg(event.target.value)\r\n                  refreshForecastData(DAF_Def[event.target.value].name)\r\n                }}\r\n                label={'Data-Algorithm-Features'}\r\n              >\r\n                {\r\n                  DAF_Def.map((value, index) => {\r\n                    return <option key={shortid.generate()} index={index} value={index}>{value.display_name}</option>\r\n                  })\r\n                }\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid container item xs={6} justify=\"flex-end\">\r\n            <Typography className={forecastStyle.forecastTableLastUpdateTime} variant=\"h6\">\r\n              {lastUpdateTime}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        {forecastTable}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Forecast\r\n","import React from 'react'\r\nimport { StylesProvider } from '@material-ui/core/styles'\r\n\r\nimport Forecast from '../components/forecast/forecast'\r\n\r\nconst ForecastPage = () => {\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <Forecast />\r\n    </StylesProvider>\r\n  )\r\n}\r\n\r\nexport default ForecastPage\r\n"],"sourceRoot":""}